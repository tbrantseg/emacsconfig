z#+AUTHOR: Tom Brantseg
#+PROPERTY: header-args :tangle yes

* About
** Introduction
We, the people...wait, wrong preamble. This is my attempt to produce a literate, structured emacs init file. This seems easier to maintain and easier to use than both a traditional monolithic =.emacs= file and a modular config - easier navigation, easier debugging, and easier maintaining.

** Useful references
There are a lot of useful references out there for maintaining and expanding this configuration. This is a section where I am storing links to useful configs, to serve as one big emacs link pool for myself, and also to reference later.
- There are quite a few literate configs out there that I've heavily referenced while making this.
  - Sriram Krishnaswamy's giant config: http://sriramkswamy.github.io/dotemacs/
  - Sacha Chua's nice emacs config: http://pages.sachachua.com/.emacs.d/Sacha.html
  - Angry Bacon's config, which has nice use of =use-package=: https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
  - Trevoke's sleek config: https://github.com/Trevoke/.emacs.d/blob/master/aldric.org
- Of course, for any of this it's nice to reference /An Introduction to Programming in Emacs Lisp/, which I really need to get around to going through completely at some point: https://www.gnu.org/software/emacs/manual/html_node/eintr/
- A lot of this (particularly the C++ and Helm sections) is also taken from Tuhdo's C/C++ IDE guide (http://tuhdo.github.io/c-ide.html), Helm guide (http://tuhdo.github.io/helm-intro.html), and Projectile guide (http://tuhdo.github.io/helm-projectile.html).

** Keybind Summary
Keybindings defined in this configuration:
| Key   | Function                                      | Mode         |
|-------+-----------------------------------------------+--------------|
| M-f10 | Show or hide line numbers in current file     | Global       |
| C-x g | magit status for current project              | Any git repo |
| f4    | Regenerate compilation database for rtags     | C/C++        |
| f5    | Compile project                               | C/C++        |
| f6    | Switch between header/implementation files    | C/C++        |
| f7    | Display header/implementation in other window | C/C++        |
| f8    | Toggle projectile speedbar                    | C/C++        |
|-------+-----------------------------------------------+--------------|
| C-c s | File system browser hydra                     | Global       |
| C-c e | Emacs environment hydra                       | Global       |
| C-c c | Configuration hydra                           | Global       |
| C-c o | Outline browser hydra                         | Global       |

* Bootstrapping
This section is intended to get you up and running.

** Installation
*** Installing Emacs
This config has been tested to work with Emacs 24 (MacPorts and Emacs.app), the Emacs 24 =emacs-mac-app=, and Emacs 25.0 and 25.1. Pick your poison:
**** Mac
- I believe the vanilla build from MacPorts has a few differences from the main source line, but I'm not sure what they are. To get vanilla Emacs from MacPorts, type
#+BEGIN_SRC sh :tangle no
  sudo port -v install emacs-app
#+END_SRC

- To get vanilla Emacs from [[http://www.emacsformacosx.com][Emacs For Mac OS X]], just click the big download button. They also have pretest and nightly builds available.
- I've been using the master branch (25.1) of the main Emacs git repo at [[https://github.com/emacs-mirror/emacs]]. To build this, clone the git repo with 
#+BEGIN_SRC sh :tangle no
  git clone https://github.com/emacs/mirror/emacs.git
#+END_SRC
then change to the =emacs= directory and run
#+BEGIN_SRC sh :tangle no
  ./autogen.sh
  ./configure --with-ns
  make
  make install
#+END_SRC
to build. The final product should be in =emacs/nextstep/Emacs.app=, which you can just move to your Applications folder.

**** Linux
Still in progress

*** Init files (this repo)
This section contains bootstrapping code for generating the actual =emacs-init.el= file that =.emacs= will load.

To begin with, add this code to your =.emacs=.
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'load-path "~/emacs-init")
  (require 'emacs-init)
#+END_SRC

The =emacs-init.el= file included with this file contains the following code:
#+BEGIN_SRC emacs-lisp :tangle no
  ;; emacs-init.el
  ;; This file replaces itself with the contents of emacs-init.org when first run.

  (require 'org)
  (find-file "~/emacs-init/emacs-init.org")
  (org-babel-tangle)
  (load-file "~/emacs-init/emacs-init.el")
  (byte-compile-file "~/emacs-init/emacs-init.el")

  ;; emacs-init.el ends here
#+END_SRC

On first run, =emacs-init.el= will thus tangle this file and replace itself with a new =emacs-init.el= generated from this file (=emacs-init.org=).

But what about after? This file contains a bit of file-local code at the end, namely:
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'after-save-hook (lambda ()
                               (org-babel-tangle)
                               (byte-compile-file "~/emacs-init/emacs-init.el"))
            nil t)
#+END_SRC

This lambda function, saved at the very end of the file as an "eval" will cause this file to regenerate and byte-compile the file =emacs-init.el= every time you save this file, ensuring that any changes are automatically ready to go next time you start Emacs. Handy!

*** Use-Package 
Okay, the other thing is to have use-package so we can keep things as orderly as possible. This code block will automatically install =use-package= if not installed, so that it's available for the rest of this config.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (use-package bind-key
    :ensure t)
#+END_SRC

* Startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message
    (concat
     (concat ";; GNU Emacs " emacs-version  "\n")
     (concat ";; Build system: " system-configuration "\n")
     (concat ";; Build date/time: "
         (format-time-string "%Y-%m-%d %T" emacs-build-time) "\n\n")
      ";; C-j: Evaluate Lisp expression within this buffer\n\n"
      ";; C-x b: Select buffer menu\n"
      ";; C-x f: Create file\n"
      ";; C-c u: Desk utilities menu\n"
      ";; C-c p p: Jump to project\n"
      ";; C-c c: Emacs config menu\n\n"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package cl)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Thomas Brantseg")
  (setq user-email-address "tom.brantseg@gmail.com")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (let ((backup-dir "~/.emacs.d/backups")
	(auto-saves-dir "~/.emacs.d/auto-saves"))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
	(make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
	  auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
	  auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
	  tramp-backup-directory-alist `((".*" . ,backup-dir))
	  tramp-auto-save-directory auto-saves-dir))

  (setq backup-by-copying t)
  (setq delete-old-versions t)
  (setq version-control t)
  (setq kept-new-versions 5)
  (setq kept-old-versions 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package server
    :config
    (unless (server-running-p)
      (server-start)))
#+END_SRC

* System Paths
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "customize.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* Look and Feel
** Font and theme
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
	      :family "Inconsolata for Powerline" :height 110 :weight 'normal)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :config
    (load-theme 'sanityinc-tomorrow-eighties t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line-powerline-theme
    :ensure t)
  (use-package smart-mode-line
    :ensure t
    :init
    (setq sml/no-confirm-load-theme t)
    (setq sml/theme 'powerline)
    :config
    (sml/setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (if (eq window-system 'ns)
      (setq ns-use-native-fullscreen nil))
#+END_SRC

** Menus and line numbers
#+BEGIN_SRC emacs-lisp
  (unless window-system
    (menu-bar-mode -1))
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (visual-line-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t

    :init
    (defun my-add-to-multiple-hooks (function hooks)
    (mapc (lambda (hook)
        (add-hook hook function))
          hooks))

    (defun tb/set-linum-format ()
      (unless window-system
        (setq nlinum-format "%d ")))

    :config
    (add-hook 'before-make-frame-hook 'tb/set-linum-format)

    :bind
    ("<M-f10>" . nlinum-mode))
#+END_SRC

* General hooks and keybinds
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'nlinum-mode)
  (bind-key "M-RET" 'comment-indent-new-line)
#+END_SRC

* OS-specific
#+BEGIN_SRC emacs-lisp
  (if (memq window-system '(mac ns))
      (progn
	(setq ns-use-srgb-colorspace nil)
	(setq mac-command-modifier 'meta)))
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-x
    :ensure t
    :after dired
    :init
    (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))))
#+END_SRC

* Helm
** Helm Core
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t

    :init
    (global-unset-key (kbd "C-x c"))
    (when (executable-find "curl")
      (setq helm-net-prefer-curl t))
    (setq helm-split-window-in-side-p t)
    (setq helm-move-to-line-cycle-in-source t)
    (setq helm-ff-search-library-in-sexp t)
    (setq helm-scroll-amount 8)
    (setq helm-ff-file-name-history-use-recentf t)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-buffers-fuzzy-matching t)
    (setq helm-recentf-fuzzy-match t)

    :config
    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)
    (helm-mode 1)
    (helm-autoresize-mode t)

    :bind
    (("C-c h" . helm-command-prefix)
     ("M-x" . helm-M-x)
     ("C-x b" . helm-mini)
     ("C-x C-f" . helm-find-files)
     ("M-y" . helm-show-kill-ring)

     :map helm-map
     ("<tab>" . helm-execute-persistent-action)
     ("C-i" . helm-execute-persistent-action)
     ("C-z" . helm-select-action)))
#+END_SRC

** Helm-GTAGS
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure t

    :init
    (setq helm-gtags-ignore-case t)
    (setq helm-gtags-auto-update t)
    (setq helm-gtags-use-input-at-cursor t)
    (setq helm-gtags-pulse-at-cursor t)
    (setq helm-gtags-prefix-key "\C-cg")
    (setq helm-gtags-suggested-key-mapping t)

    :config
    (my-add-to-multiple-hooks
     'helm-gtags-mode
     '(dired-mode-hook
       eshell-mode-hook
       c-mode-hook
       c++-mode-hook
       asm-mode-hook))

    :bind
    (:map helm-gtags-mode-map
	  ("C-c g a" . helm-gtags-tags-in-this-function)
	  ("C-j" . helm-gtags-select)
	  ("M-." . helm-gtags-dwim)
	  ("M-," . helm-gtags-pop-stack)
	  ("C-c <" . helm-gtags-previous-history)
	  ("C-c >" . helm-gtags-next-history)))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-completion-system 'helm)
    (add-hook 'c++-mode-hook 'projectile-mode)

    :config
    (projectile-mode)

    :bind
    (:map c++-mode-map
      ("<f6>" . projectile-find-other-file)
      ("<f7>" . projectile-find-other-file-other-window)))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :bind
    (("C-x g" . magit-status)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package magithub
    :ensure t
    :defer t
    :after magit
    :config
    (magithub-feature-autoinject t))
#+END_SRC

* Autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'company-mode)
    (setq company-show-numbers t)
    (setq company-tooltip-limit 20)
    (setq company-idle-delay 0)
    :config
    (global-company-mode))

  (use-package company-ycmd
    :ensure t
    :after company)

  (use-package flycheck-ycmd
    :ensure t
    :after ycmd)

  (use-package ycmd
    :ensure t
    :defer t
    :after company
    :init
    (setq ycmd-server-command (list "python" "/home/tom/ycmd/ycmd"))
    (add-hook 'ycmd-mode-hook 'company-ycmd-setup)
    (add-hook 'ycmd-mode-hook 'flycheck-ycmd-setup)
    (add-hook 'emacs-lisp-mode-hook '(lambda () (ycmd-mode -1)))
    (setq ycmd-startup-timeout 20)
    :config
    (global-ycmd-mode))

  (use-package company-ycmd
    :ensure t
    :init
    (add-hook 'ycmd-mode-hook 'company-ycmd-setup))

  (use-package flycheck-ycmd
    :ensure t
    :init
    (add-hook 'ycmd-mode-hook 'flycheck-ycmd-setup))

#+END_SRC

** Subsidiary packages
#+BEGIN_SRC emacs-lisp
  (use-package company-clang
    :ensure t)
  (use-package company-irony
    :ensure t)
  (use-package company-irony-c-headers
    :ensure t)
  (use-package company-rtags
    :ensure t)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'c-mode-hook 'flycheck-mode))
  (use-package flycheck-rtags
    :ensure t
    :after flycheck)
  (use-package flycheck-irony
    :ensure t
    :after flycheck)
#+END_SRC
# * CMake IDE
# #+BEGIN_SRC emacs-lisp
#   (use-package rtags
#     :ensure t
#     :init
#     (setq rtags-use-helm t)
#     (rtags-enable-standard-keybindings)
#     (setq rtags-autostart-diagnostics t)
#     (setq rtags-completions-enabled t))
#   (use-package cpputils-cmake
#     :ensure t
#     :init
#     (add-hook 'c-mode-common-hook
#             (lambda ()
#               (if (derived-mode-p 'c-mode 'c++-mode)
#                   (cppcm-reload-all)
#                 ))))
#   (use-package cmake-ide
#     :ensure t
#     :after rtags
#     :config
#     (cmake-ide-setup))
# #+END_SRC
* Minor modes
** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (sp-with-modes '(c-mode c++-mode)
	     (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
	     (sp-local-pair "/*" "/*" :post-handlers '((" | " "SPC")
						       ("* ||\n[i]" "RET"))))
    (show-smartparens-global-mode +1)
    (smartparens-global-mode 1)

    :bind
    (:map smartparens-mode-map
	  ("M-<up>" . sp-forward-sexp)
	  ("M-<down>" . sp-backward-sexp)))
#+END_SRC

** Firestarter
#+BEGIN_SRC emacs-lisp
  (use-package firestarter
    :ensure t
    :config
    (firestarter-mode))
#+END_SRC

** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer 10
    :config
    (setq which-key-popup-type 'side-window)
    (setq which-key-compute-remaps t)
    (which-key-mode 1))
#+END_SRC

** Highlight indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :init
    (add-hook 'emacs-startup-hook
	    (lambda ()
	      (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)))
    (setq highlight-indent-guides-method 'character))
#+END_SRC
* Other C++ settings
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "stroustrup")
  (global-set-key (kbd "RET") 'newline-and-indent)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq auto-mode-alist(cons '("\\.h$"   . c++-mode)  auto-mode-alist))
  (define-key c-mode-base-map (kbd "M-RET") 'comment-indent-new-line)
  (define-key c-mode-base-map [(tab)] 'company-complete)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defcustom main-compile-command nil
    "Shell command used for main project compilation."
    :type 'string
    :group 'tom-custom)
  (put 'main-compile-command 'safe-local-variable #'stringp)

  (defun main-compile-project ()
    (interactive)
    (setq-local compilation-read-command nil)
    (compile main-compile-command))

  (global-set-key (kbd "<f5>") 'main-compile-project)
 
  (setq compilation-scroll-output 1)
#+END_SRC
* Python
** Anaconda
#+BEGIN_SRC emacs-lisp
  ;; (use-package company-anaconda
  ;;   :ensure t
  ;;   :after python
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'anaconda-mode)
  ;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  ;;   (add-hook 'python-mode-hook 'flycheck-mode)
  ;;   (add-hook 'python-mode-hook (lambda ()
  ;;                               (make-local-variable 'company-backends)
  ;;                               (add-to-list 'company-backends 'company-anaconda))))
#+END_SRC
# ** Jedi
# #+BEGIN_SRC emacs-lisp
#   (use-package company-jedi
#     :ensure t
#     :config
#     (setq jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
#     (add-hook 'python-mode-hook 'jedi:setup)
#     (setq jedi:complete-on-dot t)
#     (setq jedi:use-shortcuts t)
#     (defun tb/enable-company-jedi ()
#       (add-to-list 'company-backends 'company-jedi))
#     (add-hook 'python-mode-hook 'tb/enable-company-jedi))
# #+END_SRC
** Environments
#+BEGIN_SRC emacs-lisp
  (use-package conda
    :ensure t
    :defer t
    :init
    (setq conda-anaconda-home "/Users/tbrantse/miniconda2")
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (add-hook 'python-mode-hook 'conda-env-autoactivate-mode))
#+END_SRC

** IPython
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-args "--simple-prompt -i")
(setq python-shell-prompt-regexp "In \\[[0-9]+\\]: ")
(setq python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: ")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :ensure t)
#+END_SRC

#+RESULTS:

** Other Python settings
#+BEGIN_SRC emacs-lisp
(setq py-force-py-shell-name-p t)
(setq py-shell-switch-buffers-on-execute-p t)
(setq py-switch-buffers-on-execute-p t)
(setq py-split-windows-on-execute-p nil)
(setq py-smart-indentation t)
#+END_SRC
   
* LaTeX
** Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(defun turn-on-outline-minor-mode()
  (outline-minor-mode 1))

(add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
(setq outline-minor-mode-prefix "\C-c \C-o")
#+END_SRC

** LaTeXMk
#+BEGIN_SRC emacs-lisp
  (use-package auctex-latexmk
    :ensure t
    :init
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    :config
    (auctex-latexmk-setup))
#+END_SRC

** RefTeX
coming soon

* Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t)
#+END_SRC

** Org-ref
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t

    :init
    (setq org-ref-default-bibliography '("/Users/tbrantse/Library/texmf/bibtex/bib/biblio.bib"))
    (setq org-ref-pdf-directory "~/Documents/Papers")
    (setq bibtex-completion-bibliography '("/Users/tbrantse/Library/texmf/bibtex/bib/biblio.bib")))
#+END_SRC

** Org-LaTeX
#+BEGIN_SRC emacs-lisp
    (setq org-latex-pdf-process (list "/opt/local/bin/latexmk -f -pdf %f"))
    (setq org-latex-hyperref-template nil)
    (add-to-list 'org-latex-classes
                 '("aastex"
                   "\\documentclass{aastex}
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t

    :init
    (setq doc-view-ghostscript-program "/opt/local/bin/gs")
    (setq revert-without-query '("\\.pdf\\'"))
    (delete '("\\.pdf\\'" . default) org-file-apps)
    (add-to-list 'org-file-apps '("\\.pdf\\'" . find-file-other-window))

    :config
    (pdf-tools-install))
#+END_SRC
** Org-babel
#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode :ensure t)

  (use-package ob-ipython
    :ensure t
    :defer t
    :after org
    :init
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (add-to-list 'company-backends 'company-ob-ipython)
    (add-hook 'python-mode-hook
              '(lambda () (define-key python-mode-map (kbd "M-<tab>") 'ob-ipython-inspect)))
    (setq ob-ipython-command "ipython")
    (defun my-babel-languages ()
      (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
      (org-babel-do-load-languages   
       'org-babel-load-languages
       '((dot . t)
         (emacs-lisp t)
         (ditaa . t)
         (python . t)
         (ipython . t)
         (shell . t)
         (gnuplot . t)
         (plantuml . t)
         (python . t))))
    (add-hook 'org-mode-hook 'my-babel-languages)

    (defun insert-csv-file-as-org-table (filename)
      "Insert a file into the current buffer at point, and convert it to an org table."
      (interactive (list (read-file-name "csv file: ")))
      (let* ((start (point))
             (end (+ start (nth 1 (insert-file-contents filename)))))
        (org-table-convert-region start end)))

    (setq org-confirm-babel-evaluate nil)
    (defun my-library-of-babel-setup ()
      (org-babel-lob-ingest "~/emacs-init/code_blocks.org"))
    (add-hook 'after-init-hook #'my-library-of-babel-setup)

    :bind
    (:map org-mode-map
          ("C-c f" . insert-csv-file-as-org-table)))
#+END_SRC

#+RESULTS:

** Org-agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :ensure t

    :init
    (setq org-agenda-files (list "~/org/todo.org"))
    (setq org-log-done 'time)
    (setq org-agenda-include-diary t)
    (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "")
            (alltodo "")))))
  
    (defun tb-org-agenda-capture (&optional vanilla)
    "Capture a task in agenda mode, using the date at point. If VANILLA is non-nil, run the standard `org-capture'."
    (interactive "P")
    (if vanilla
        (org-capture)
      (let ((org-overriding-default-time (org-get-cursor-date)))
        (org-capture nil "a"))))


    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     :map org-agenda-mode-map
     ("c" . tb-org-agenda-capture)))
#+END_SRC

* Hydras
#+BEGIN_SRC emacs-lisp
    (use-package hydra
      :ensure t
      :config
      (defhydra tb-system-hydra (:color blue :hint nil)
        "
    File system commands:
    ---------------
    _s_: Open eshell
    _t_: Open plain terminal
    _d_: Open dired in current directory
    _p_: Find file in project
    _g_: grep in project
    "
        ("s" eshell)
        ("t" ansi-term)
        ("d" dired)
        ("p" projectile-find-file)
        ("g" projectile-grep))

      (defhydra tb-info-hydra (:color blue :hint nil)
    "
    Emacs environment (describe):
    ----------------------------
    _k_: Describe key binding
    _v_: Describe variable
    _f_: Describe function
    _m_: Describe current mode
    "
    ("k" describe-key)
    ("v" describe-variable)
    ("f" describe-function)
    ("m" describe-mode))

      (defhydra tb-grep-hydra (:color blue :hint nil)
    "
    Search functions:
    ----------------
    _d_: Grep in directory...
    _p_: Grep in project...
    "
    ("p" projectile-grep)
    ("d" find-grep-dired))

      (defun tb-gchat-helper ()
      (interactive)
      (jabber-connect-all)
      (call-interactively 'jabber-chat-with))

    (defhydra tb-utility-hydra (:color blue :hint nil)
    "
    Desk utilities:
    ----------
    _c_: calculator
    _d_: calendar
    _g_: Google Talk...
    _j_: New journal entry
    "
    ("c" calc)
    ("d" calendar)
    ("g" jabber-connect-all)
    ("j" org-journal-new-entry)
  ;;  ("m" (lambda() (interactive) (mu4e-alert-view-unread-mails)))
    )

    (defhydra tb-config-hydra (:color blue :hint nil)
    "
    Configuration functions
    -----------------------
    _c_: Open emacs-init.org
    _r_: Reload configuration
    _e_: Open .emacs
    _p_: List packages
    _g_: Customize group
    "
    ("c" (find-file "~/emacs-init/emacs-init.org"))
    ("e" (find-file "~/.emacs"))
    ("r" (load-file "~/emacs-init/emacs-init.el"))
    ("p" package-list-packages)
    ("g" customize-group))

    (defhydra hydra-outline (:color pink :hint nil)
      "
    ^Hide^             ^Show^           ^Move
    ^^^^^^------------------------------------------------------
    _q_: sublevels     _a_: all         _u_: up
    _t_: body          _e_: entry       _n_: next visible
    _o_: other         _i_: children    _p_: previous visible
    _c_: entry         _k_: branches    _f_: forward same level
    _l_: leaves        _s_: subtree     _b_: backward same level
    _d_: subtree

    "
      ;; Hide
      ("q" outline-hide-sublevels)    ; Hide everything but the top-level headings
      ("t" outline-hide-body)         ; Hide everything but headings (all body lines)
      ("o" outline-hide-other)        ; Hide other branches
      ("c" outline-hide-entry)        ; Hide this entry's body
      ("l" outline-hide-leaves)       ; Hide body lines in this entry and sub-entries
      ("d" outline-hide-subtree)      ; Hide everything in this entry and sub-entries
      ;; Show
      ("a" outline-show-all)          ; Show (expand) everything
      ("e" outline-show-entry)        ; Show this heading's body
      ("i" outline-show-children)     ; Show this heading's immediate child sub-headings
      ("k" outline-show-branches)     ; Show all sub-headings under this heading
      ("s" outline-show-subtree)      ; Show (expand) everything in this heading & below
      ;; Move
      ("u" outline-up-heading)                ; Up
      ("n" outline-next-visible-heading)      ; Next
      ("p" outline-previous-visible-heading)  ; Previous
      ("f" outline-forward-same-level)        ; Forward - same level
      ("b" outline-backward-same-level)       ; Backward - same level
      ("z" nil "leave"))

    :bind
    (("C-c s" . tb-system-hydra/body)
     ("C-c e" . tb-info-hydra/body)
     ("C-c f" . tb-grep-hydra/body)
     ("C-c u" . tb-utility-hydra/body)
     ("C-c c" . tb-config-hydra/body)
     ("C-c o" . hydra-outline/body)))
#+END_SRC

* Jabber
#+BEGIN_SRC emacs-lisp
  (use-package jabber
    :ensure t
    :init
    (setq jabber-history-enabled t)
    (setq jabber-use-global-history nil)
    (setq jabber-backlog-number 40)
    (setq jabber-backlog-days 30))
#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
(setq tramp-shell-prompt-pattern "\\(?:^\\|\r\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
#+END_SRC

* Macros
#+BEGIN_SRC emacs-lisp
  (fset 'query_to_gs
     "'\C-e ',\C-n\C-a")
  (global-set-key (kbd "C-c q") 'query_to_gs)
#+END_SRC
* Final setup
#+BEGIN_SRC emacs-lisp
(load-file "~/emacs-init/secret.el")
(appt-activate)
(display-time)
(visual-line-mode)
#+END_SRC

* End
So, we're done. The last thing we have to do is let the main =.emacs= know we have the tangled elisp file ready to go.
#+BEGIN_SRC emacs-lisp
  (message "emacs-init.el finished loading!")
  (provide 'emacs-init)
#+END_SRC
And that's it! Every time you save this file, it will automatically create and compile =emacs-init.el=, and =.emacs= will load the configuration from that file on startup.

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle) (byte-compile-file "emacs-init.el")) nil t)
# End:

# emacs-init.org ends here

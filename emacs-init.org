#+AUTHOR: Tom Brantseg
#+PROPERTY: header-args :tangle yes

* About
** Introduction
We, the people...wait, wrong preamble. This is my attempt to produce a literate, structured emacs init file. This seems easier to maintain and easier to use than both a traditional monolithic =.emacs= file and a modular config - easier navigation, easier debugging, and easier maintaining.

** Useful references
There are a lot of useful references out there for maintaining and expanding this configuration. This is a section where I am storing links to useful configs, to serve as one big emacs link pool for myself, and also to reference later.
- There are quite a few literate configs out there that I've heavily referenced while making this.
  - Sriram Krishnaswamy's giant config: http://sriramkswamy.github.io/dotemacs/
  - Sacha Chua's nice emacs config: http://pages.sachachua.com/.emacs.d/Sacha.html
  - Angry Bacon's config, which has nice use of =use-package=: https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
  - Trevoke's sleek config: https://github.com/Trevoke/.emacs.d/blob/master/aldric.org
- Of course, for any of this it's nice to reference /An Introduction to Programming in Emacs Lisp/, which I really need to get around to going through completely at some point: https://www.gnu.org/software/emacs/manual/html_node/eintr/
- A lot of this (particularly the C++ and Helm sections) is also taken from Tuhdo's C/C++ IDE guide (http://tuhdo.github.io/c-ide.html), Helm guide (http://tuhdo.github.io/helm-intro.html), and Projectile guide (http://tuhdo.github.io/helm-projectile.html).

** Keybind Summary
Keybindings defined in this configuration:
| Key   | Function                                      | Mode         |
|-------+-----------------------------------------------+--------------|
| M-f10 | Show or hide line numbers in current file     | Global       |
| C-x g | magit status for current project              | Any git repo |
| f4    | Regenerate compilation database for rtags     | C/C++        |
| f5    | Compile project                               | C/C++        |
| f6    | Switch between header/implementation files    | C/C++        |
| f7    | Display header/implementation in other window | C/C++        |
| f8    | Toggle projectile speedbar                    | C/C++        |
|-------+-----------------------------------------------+--------------|
| C-c s | File system browser hydra                     | Global       |
| C-c e | Emacs environment hydra                       | Global       |
| C-c c | Configuration hydra                           | Global       |
| C-c o | Outline browser hydra                         | Global       |

* Bootstrapping
This section is intended to get you up and running.

** Installation
*** Installing Emacs
This config has been tested to work with Emacs 24 (MacPorts and Emacs.app), the Emacs 24 =emacs-mac-app=, and Emacs 25.0 and 25.1. Pick your poison:
- I believe the vanilla build from MacPorts has a few differences from the main source line, but I'm not sure what they are. To get vanilla Emacs from MacPorts, type
#+BEGIN_SRC sh :tangle no
  sudo port -v install emacs-app
#+END_SRC

- To get vanilla Emacs from [[http://www.emacsformacosx.com][Emacs For Mac OS X]], just click the big download button. They also have pretest and nightly builds available.
- I've been using the master branch (25.1) of the main Emacs git repo at [[https://github.com/emacs-mirror/emacs]]. To build this, clone the git repo with 
#+BEGIN_SRC sh :tangle no
  git clone https://github.com/emacs/mirror/emacs.git
#+END_SRC
then change to the =emacs= directory and run
#+BEGIN_SRC sh :tangle no
  ./autogen.sh
  ./configure --with-ns
  make
  make install
#+END_SRC
to build. The final product should be in =emacs/nextstep/Emacs.app=, which you can just move to your Applications folder.

*** Init files (this repo)
This section contains bootstrapping code for generating the actual =emacs-init.el= file that =.emacs= will load.

To begin with, add this code to your =.emacs=.
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'load-path "~/emacs-init")
  (require 'emacs-init)
#+END_SRC

The =emacs-init.el= file included with this file contains the following code:
#+BEGIN_SRC emacs-lisp :tangle no
  ;; emacs-init.el
  ;; This file replaces itself with the contents of emacs-init.org when first run.

  (require 'org)
  (find-file "~/emacs-init/emacs-init.org")
  (org-babel-tangle)
  (load-file "~/emacs-init/emacs-init.el")
  (byte-compile-file "~/emacs-init/emacs-init.el")

  ;; emacs-init.el ends here
#+END_SRC

On first run, =emacs-init.el= will thus tangle this file and replace itself with a new =emacs-init.el= generated from this file (=emacs-init.org=).

But what about after? This file contains a bit of file-local code at the end, namely:
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'after-save-hook (lambda ()
                               (org-babel-tangle)
                               (byte-compile-file "~/emacs-init/emacs-init.el"))
            nil t)
#+END_SRC

This lambda function, saved at the very end of the file as an "eval" will cause this file to regenerate and byte-compile the file =emacs-init.el= every time you save this file, ensuring that any changes are automatically ready to go next time you start Emacs. Handy!

* End
So, we're done. The last thing we have to do is let the main =.emacs= know we have the tangled elisp file ready to go.
#+BEGIN_SRC emacs-lisp
  (message "emacs-init.el finished loading!")
  (provide 'emacs-init)
#+END_SRC
And that's it! Every time you save this file, it will automatically create and compile =emacs-init.el=, and =.emacs= will load the configuration from that file on startup.

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle) (byte-compile-file "emacs-init.el")) nil t)
# End:

# emacs-init.org ends here
